// Generated by CoffeeScript 1.10.0

/* QEDPI's Latte */

(function() {
  var Transposer, draw_polygon,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Transposer = require('chord-transposer');

  draw_polygon = function() {
    var poly;
    poly = $('#polygon').getContext('2d');
    poly.fillStyle = '#f00';
    poly.beginPath();
    poly.moveTo(0, 0);
    poly.lineTo(200, 50);
    poly.lineTo(50, 200);
    poly.lineTo(0, 90);
    poly.closePath();
    poly.fill();
    return 0;
  };

  window.onload = function() {
    return draw_polygon();
  };

  $(function() {
    var animate_body, color_formatter, init_chords, into_lines, major_to_both, major_to_minor, maybe_key, music_format, music_formatter, music_unformat, orig_chords, original, original_key, original_text, pretty, quality_d, scroll_speed, scroll_speed_fast, scroll_speed_medium, scroll_speed_slow, scroll_state_off, scroll_state_on, semitone_offset, set_key_to, shareClipboard, share_link, stop_animation, temp, transpose_by, transpose_to, uke_domain, words, x;
    semitone_offset = 0;
    major_to_minor = {
      "Eb": "C",
      "E": "C#",
      "F": "D",
      "Gb": "Eb",
      "G": "E",
      "Ab": "F",
      "A": "F#",
      "Bb": "G",
      "B": "G#",
      "C": "A",
      "Db": "Bb",
      "D": "B"
    };
    uke_domain = 'http://www.ukulele-tabs.com/images/ukulele-chords/';
    into_lines = function(text) {
      return text.split('\n');
    };
    words = function(line) {
      return line.split(' ');
    };
    major_to_both = function(key) {
      return key + '/' + major_to_minor[key] + 'm';
    };
    set_key_to = function(result) {
      $('#lyrics').html(result.text);
      return $('#new-key').val(major_to_both(result.key));
    };
    music_format = function(text) {
      return text.replace(/#/g, '♯').replace(/b/g, '♭');
    };
    music_unformat = function(text) {
      return text.replace(/♯/g, '#').replace(/♭/g, 'b');
    };
    music_formatter = function(sym, id) {
      return sym.replace('#', '♯').replace('b', '♭');
    };
    color_formatter = function(sym, id) {
      var image, loc, str;
      str = music_format(sym);
      if (indexOf.call(str, 'i') >= 0) {
        str = str.replace(/(dim)/g, 'm°');
      }
      str = str.replace(/(maj)/g, 'v');
      if (indexOf.call(str, 'm') >= 0) {
        loc = str.indexOf('m');
        str = str.slice(0, loc).toLowerCase() + str.slice(loc + 1);
      }
      str = str.replace(/M/g, '');
      sym = sym.replace(/M/g, '');
      sym = sym.replace(/\//g, '-');
      str = str.replace(/(\d+)/g, '<sup>$1</sup>');
      str = str.replace(/v/g, 'maj');
      image = uke_domain + sym + '.png';
      return '<b><a class="nodec" href = "' + image + '"><span class="xxlarge c' + (id % 7 + 1) + '">' + str + '</span></a></b>';
    };
    $('a.nodec').tooltip({
      content: '<img src="http://www.ukulele-tabs.com/images/ukulele-chords/C.png" />'
    });
    transpose_by = function(steps) {
      var lyrics_text;
      lyrics_text = original_text;
      return set_key_to(Transposer.transpose(lyrics_text).withFormatter(color_formatter).up(steps));
    };
    transpose_to = function(key) {
      var lyrics_text;
      lyrics_text = original_text;
      return set_key_to(Transposer.transpose(lyrics_text).withFormatter(color_formatter).toKey(key));
    };
    maybe_key = Transposer.transpose($('#lyrics').text()).up(0).key;
    orig_chords = [0, 2, 4, 5, 7, 9, 11];
    quality_d = {
      0: '',
      2: 'm',
      4: 'm',
      5: '',
      7: '',
      9: 'm',
      11: 'dim'
    };
    orig_chords = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = orig_chords.length; i < len; i++) {
        x = orig_chords[i];
        results.push(Transposer.transpose(maybe_key).up(x).text + quality_d[x]);
      }
      return results;
    })();
    init_chords = orig_chords.join(' ') + '\n';
    original = Transposer.transpose($('#lyrics').prepend(init_chords).text()).up(0);
    original_key = major_to_both(original.key);
    original_text = original.text;
    transpose_by(0);
    $('#transpose-up').click(function() {
      semitone_offset = (semitone_offset + 1) % 12;
      return transpose_by(semitone_offset);
    });
    $('#transpose-down').click(function() {
      semitone_offset = (semitone_offset - 1) % 12;
      return transpose_by(semitone_offset);
    });
    $('#transpose-reset').click(function() {
      return transpose_to(original_key.split('/')[0]);
    });
    $('#new-key').change(function() {
      return transpose_to($(this).val().split('/')[0]);
    });
    shareClipboard = new Clipboard('#share_link_passcode');
    temp = $('#test-case').text();
    pretty = {
      val: 2
    };

    /**
    #my docstring
     *
     */

    /*
    scroll_lyrics = $('div.autoscrolling')
    setInterval ->
      pos = scroll_lyrics.scrollTop
      scroll_lyrics.scrollTop(++pos)
    , 100
     */
    scroll_speed_fast = 100000;
    scroll_speed_medium = 200000;
    scroll_speed_slow = 400000;
    scroll_speed = scroll_speed_medium;
    scroll_state_off = 'fa fa-arrow-down';
    scroll_state_on = 'fa fa-pause';
    stop_animation = function() {
      return $('html, body').stop();
    };
    animate_body = function() {
      var scrollable;
      $('html, body').animate({
        scrollTop: $('html, body').get(0).scrollHeight
      }, scroll_speed);
      return scrollable = $('html, body');

      /*
      if ($(scrollable).scrollTop() + $(scrollable).innerHeight()) * .1 >= $(scrollable).scrollHeight
        $('#autoscroll-button').removeClass(scroll_state_on).addClass(scroll_state_off)
        stop_animation()
        alert 'done scrolling'
       */
    };
    $('#autoscroll-button').click(function() {
      var current;
      current = $('#autoscroll-button');
      if (current.hasClass(scroll_state_off)) {
        $('#autoscroll-button').removeClass(scroll_state_off).addClass(scroll_state_on);
        return animate_body();
      } else {
        $('#autoscroll-button').removeClass(scroll_state_on).addClass(scroll_state_off);
        return stop_animation();
      }
    });
    $('#autoscroll-faster').click(function() {
      stop_animation();
      scroll_speed *= .75;
      return animate_body();
    });
    $('#autoscroll-slower').click(function() {
      stop_animation();
      scroll_speed *= 1.3;
      return animate_body();
    });
    $('#is_sharable').change(function() {
      var disable_status;
      disable_status = $(this).prop('checked') ? 'enable' : 'disable';
      $('#share_with').bootstrapToggle(disable_status);
      return $('#share_link').prop('disabled', !$('#share_link').prop('disabled'));
    });
    share_link = '';
    $('#share_link').click(function() {
      return share_link = $('#share_link_passcode').text();
    });
    return $('#copy_sharelink_clipboard').click(function() {
      var link_new;
      link_new = window.location.href.split('/').slice(0, -2).join('/') + '/' + share_link;
      $('#share_link_passcode').val(window.location.href.split('/').slice(0, -2).join('/') + '/' + $('#share_link_passcode').val());
      $('#share_link_passcode').select();
      return document.execCommand('copy');
    });

    /*
    $('#toggle-favorite').on 'Submit', (e) ->
      e.preventDefault()
      alert 'Favorited!'
      toggle_favorite
     */
  });


  /*first multiline coment!
   */


  /*
  name = 'hello bye'

  coffee = ->
    console.log 'coffee'

  double = (x) ->
    x * 2

  console.log name
  console.log double 5

  makeitdouble = (msg) ->
    answer = confirm msg
    "your answer is #{answer}"

  alert makeitdouble('apple')
   */

}).call(this);

//# sourceMappingURL=detail.js.map


// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var local_pathname;
    local_pathname = window.location.pathname;
    return $('#toggle-practice-browse').change(function() {
      var goto;
      goto = '/cards/practice/';
      if (local_pathname === '/cards/practice/') {
        goto = '/cards/public/';
      }
      return window.location.href = goto;
    });
  });


  /*
  $ ->
    practice_browse_state = sessionStorage.getItem('practice_browse')

      if practice_browse_state == 'false' # browse mode: turn button off
        $('#toggle-practice-browse').change ->
          sessionStorage.setItem('practice_browse', 'true')
          window.location.href = '/cards/practice'
      else
        $(@).bootstrapToggle 'toggle'
        $('#toggle-practice-browse').change ->
          sessionStorage.setItem('practice_browse', 'false')
          window.location.href = '/cards/public'
   */


  /*
  $ ->
    practice_browse_state = sessionStorage.getItem('practice_browse')
    alert practice_browse_state
    unchanged = true
    if practice_browse_state == 'false'
      $('#toggle-practice-browse').bootstrapToggle 'off'
      alert 'swithed off'
      unchanged = false


     * toggle practice vs browse
    $('#toggle-practice-browse-href').click ->

      if unchanged
        sessionStorage.setItem('practice_browse', (if practice_browse_state then 'false' else 'true'))
        alert 'changed by function'
        if ($(@).prop 'checked') == 'false' # Practice
          window.location.href = '/cards/public'
        else
          window.location.href = '/cards/practice'
      else
        unchanged = true

          #$(@).bootstrapToggle 'off'
          #$(@).attr(class, 'white fa fa-')
   */

}).call(this);

//# sourceMappingURL=index.js.map
